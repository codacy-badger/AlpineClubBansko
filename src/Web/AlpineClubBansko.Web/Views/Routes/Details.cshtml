@model AlpineClubBansko.Services.Models.RouteViewModels.RouteViewModel
@using AlpineClubBansko.Data.Models
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid content">
    <hr />
    @await Component.InvokeAsync("RouteOptions", Model)
    <hr />
    <div class="row">
        <div class="offset-2 col-8">
            <div class="row">
                @if (string.IsNullOrEmpty(Model.Content))
                {
                    <div class="col-12 text-muted font-italic text-center align-middle">Няма въведено описание за този маршрут</div>
                }
                else
                {
                    @Model.Content
                }
            </div>

            @if (Model.Story != null)
            {
                <div class="row">
                    <div class="col-12 text-muted font-italic text-center align-middle pt-2">Има История за този Преход, Проети я <a asp-controller="Stories" asp-action="Details" asp-route-id="@Model.Story.Id">тук</a></div>
                </div>
            }
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-md-7" id="map"></div>
        <div class="col-md-5">

            <p class="text-center">Маршрут</p>
            <hr />
            @if (Model.Locations != null && Model.Locations.Count > 0)
            {
                <ol>
                    @foreach (var location in Model.Locations.OrderBy(l => l.CreatedOn))
                    {
                        <li>@location.Name -> {Lat: @location.Latitude : Lng: @location.Longitude}</li>
                    }
                </ol>
            }
            else
            {
                <div class="col-12 text-muted font-italic text-center align-middle">Няма въведен маршрут</div>
            }
        </div>
    </div>
    <hr />

    <div class="row">
        @if (Model.Album != null)
        {
            <ul id="lightSlider" class="cs-hidden">
                @foreach (var photo in Model.Album.Photos)
                {
                    <li data-thumb="@photo.ThumbnailUrl">
                        <a asp-controller="Albums" asp-action="Details" asp-route-id="@photo.AlbumId"><img src="@photo.ThumbnailUrl" /></a>
                    </li>
                }
            </ul>
        }
        else
        {
            <div class="col-12 text-muted font-italic text-center align-middle">Няма свързан албум към този преход</div>
        }
    </div>
    <hr />
    <div class="row py-2">
        @if (SignInManager.IsSignedIn(User))
        {
            <vc:create-route-comment></vc:create-route-comment>
        }
    </div>
    <div class="row pt-2" id="comments">
        <partial name="_RouteComments" model="@Model.Comments" />
    </div>
    <hr />
</div>

@section Scripts{
    <script src="~/lib/lightslider/dist/js/lightslider.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#lightSlider').lightSlider({
                autoWidth: true,
                loop: true,
                onSliderLoad: function () {
                    $('#lightSlider').removeClass('cS-hidden');
                }
            });
        });

        $(document).ready(function () {
            $.ajax({
                url: '/Routes/AddViewed',
                type: 'post',
                data: {
                    routeId: '@Model.Id',
                }, success: function (data) {
                    console.log(data);
                    RefreshStats();
                }, error: function (reponse) {
                    console.log("error : " + reponse);
                }
            });
        });

        $('#createComment').submit(function (e) {
            e.preventDefault();

            var tmp = $('#comContent').val();
            if ($("#comContent").valid()) {
                $.ajax({
                    url: '/Routes/CreateComment',
                    type: 'post',
                    data: {
                        routeId: '@Model.Id',
                        content: tmp,
                    }, success: function (data) {
                        $('#comments').html(data).fadeIn();
                        $('#comContent').val('');
                        RefreshStats();
                    }, error: function (reponse) {
                        console.log("error : " + reponse);
                    }
                });
            }
        });

        function DeleteComment(param) {
             $.ajax({
                    url: '/Routes/DeleteComment',
                    type: 'post',
                    data: {
                        commentId: param,
                        routeId: '@Model.Id'
                    }, success: function (data) {
                        $('#comments').html(data).fadeIn();
                        RefreshStats();
                    }, error: function (reponse) {
                        console.log("error : " + reponse);
                    }
                });
        }

        function Favorite() {
            $.ajax({
                url: '/Routes/Favorite',
                type: 'post',
                data: {
                    routeId: '@Model.Id',
                }, success: function (data) {
                    console.log(data);
                    RefreshStats();
                }, error: function (reponse) {
                    console.log("error : " + reponse);
                }
            })
        }

        function RefreshStats() {
            $.ajax({
                url: '/Routes/RefreshStats',
                type: 'get',
                data: {
                    routeId: '@Model.Id',
                }, success: function (data) {
                    $('#optionsNav').replaceWith(data);
                    SetOptionNavH();
                }, error: function (reponse) {
                    console.log("error : " + reponse);
                }
            })
        }
    </script>

    <script>
        var map;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 41.837480, lng: 23.488766 },
                zoom: 13
            });

            getData();
        };

        function getData() {
            $.ajax({
                url: "/Routes/GetListRouteCoords",
                type: 'GET',
                contentType: "application/json",
                data: {
                    routeId: '@Model.Id'
                },
                success: function (data) {
                    if (data != null) {
                        getMarkers(data);
                    } else {
                        console.log("No data")
                    }

                },
            });

            function getMarkers(data) {
                var startLocData = data[0];
                var startName = startLocData["name"];
                var startLatLng = new google.maps.LatLng(startLocData["latitude"], startLocData["longitude"]);

                var startMarker = new google.maps.Marker({
                    title: startName,
                    position: startLatLng,
                    map: map,
                });

                var waypts = [];

                for (var i = 0; i < data.length; i++) {
                    var curData = data[i];
                    var marker = new google.maps.Marker({
                        title: curData['name'],
                        position: new google.maps.LatLng(curData["latitude"], curData["longitude"]),
                        map: map,
                    });
                    waypts.push(
                        new google.maps.LatLng(curData["latitude"], curData["longitude"])
                    );
                }

                var lineSymbol = {
                    path: google.maps.SymbolPath.CIRCLE,
                    strokeOpacity: 1,
                    fillOpacity: 0,
                    strokeColor:'#a7288a',
                    scale: 5
                };

                var line = new google.maps.Polyline({
                    path: waypts,
                    strokeOpacity: 0,
                    icons: [{
                        icon: lineSymbol,
                        offset: '0',
                        repeat: '20px'
                    }],
                    map: map,
                });

                map.panTo(startMarker.position);
                map.setZoom(12);
            };
        };
    </script>
    <partial name="_OptionsNavScriptsPartial" />
    <partial name="_GoogleMapsScriptsPartial" />
    <partial name="_ValidationScriptsPartial" />
}